apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.xuchengpu.jetpackdemo"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding{
        enabled=true
    }

    compileOptions{
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    //work-runtime-ktx 2.1.0 and above now requires java 8
//    kotlinOptions{
//        jvmTarget="1.8"
//    }
}

dependencies {
    def lifecycle_version = "2.2.0"
    def room_version = "2.2.2"
    def nav_version = "2.3.0-alpha01"
    def paging_version = "2.1.1"
    def work_version = "2.3.1"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'


    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor
    kapt "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version" // For Kotlin use paging-runtime-ktx
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"
//    implementation 'androidx.room:room-runtime:2.2.3'
//    implementation 'androidx.room:room-common:2.2.3'
//    annotationProcessor "androidx.room:room-compiler:2.2.3"//针对所有compiler java代码用这个annotationProcessor
//    kapt "androidx.room:room-compiler:2.2.3"//kotlin的用这个kapt
//
//    implementation 'androidx.paging:paging-runtime:2.1.1'
//    implementation 'androidx.paging:paging-common:2.1.1'
//
//    implementation 'androidx.work:work-runtime:2.2.0'
//    //注意配置navigation版本号的时候，project下的build.gradle的class path也需要同步navigation的版本号配置
//    implementation 'androidx.navigation:navigation-ui:2.1.0'
//    implementation 'androidx.navigation:navigation-fragment:2.1.0'
//    implementation 'androidx.navigation:navigation-runtime:2.1.0'
}
